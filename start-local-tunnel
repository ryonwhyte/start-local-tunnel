#!/usr/bin/env bash
set -euo pipefail

# Allow inbound from the VPS's Tailscale IP (default) to a local TCP port.
# Usage: ./allow-vps-to-port         (it will sudo itself)
# Notes:
# - Looks for a peer named "vpn" to discover the VPS's Tailscale IP (IPv4).
# - If not found, you'll be prompted to enter it manually (e.g., 100.64.0.2).
# - Optionally you can allow the whole tailnet CIDR instead of just the VPS.

TAILNET_CIDR="100.64.0.0/10"   # used only if you pick "whole tailnet" mode
VPS_NAME="${VPS_NAME:-vpn}"    # change if your VPS node has a different HostName

need_sudo() { if [[ $EUID -ne 0 ]]; then exec sudo --preserve-env=VPS_NAME,TAILNET_CIDR "$0" "$@"; fi; }
need_sudo "$@"

# Ensure tailscale exists; we only use it to discover IPs and show context
if ! command -v tailscale >/dev/null 2>&1; then
  echo "tailscale CLI not found. Please install Tailscale on this machine first." >&2
  exit 1
fi

# Show this machine's TS IP for context
TS_SELF="$(tailscale ip -4 2>/dev/null | head -n1 || true)"
[[ -n "$TS_SELF" ]] && echo "This machine's Tailscale IPv4: $TS_SELF"

# Try to discover the VPS Tailscale IPv4 by HostName
VPS_TS_IP="$(tailscale status --json 2>/dev/null \
  | jq -r --arg name "$VPS_NAME" '
      [ .Peer[]? | select(.HostName==$name) | .TailscaleIPs[] | select(test(":")|not) ][0] // empty
    ' || true)"

if [[ -z "$VPS_TS_IP" ]]; then
  read -rp "VPS Tailscale IPv4 not auto-detected. Enter it (e.g. 100.64.0.2): " VPS_TS_IP
fi

if ! [[ "$VPS_TS_IP" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
  echo "Invalid IPv4: $VPS_TS_IP" >&2
  exit 1
fi

# Ask for the local port
read -rp "Local TCP port to allow (1-65535): " PORT
if ! [[ "$PORT" =~ ^[0-9]{1,5}$ ]] || (( PORT < 1 || PORT > 65535 )); then
  echo "Invalid port: $PORT" >&2
  exit 1
fi

# Scope choice
echo "Allow from which source?"
echo "  1) VPS only ($VPS_TS_IP/32)   [recommended]"
echo "  2) Whole tailnet ($TAILNET_CIDR)"
read -rp "Choose 1 or 2 [1]: " CHOICE
CHOICE="${CHOICE:-1}"

if [[ "$CHOICE" == "2" ]]; then
  SRC="$TAILNET_CIDR"
else
  SRC="$VPS_TS_IP/32"
fi

# Enable UFW if inactive
if ufw status 2>/dev/null | grep -qi "Status: inactive"; then
  read -rp "UFW is inactive. Enable it now? [y/N]: " ANS
  if [[ "${ANS,,}" == "y" ]]; then
    ufw --force enable
  else
    echo "UFW remains inactive; no rules applied." >&2
    exit 1
  fi
fi

# Idempotent add
RULE="from $SRC to any port $PORT proto tcp"
if ufw status numbered | grep -qF "ALLOW IN $RULE"; then
  echo "Rule already present: $RULE"
else
  ufw allow $RULE
  echo "Added: ufw allow $RULE"
fi

# Check if the port is listening and on which address
if command -v ss >/dev/null 2>&1; then
  echo
  echo "Listening sockets on port $PORT:"
  ss -lntp | awk -v p=":$PORT" 'NR==1 || $4 ~ p {print}'
  # Warn if only loopback
  ONLY_LOOPBACK=$(ss -lntpH "sport = :$PORT" | awk '{print $4}' | grep -v -E '127\.0\.0\.1|::1' | wc -l)
  if [[ "$ONLY_LOOPBACK" -eq 0 ]]; then
    echo "WARNING: It looks like the service is bound only to 127.0.0.1."
    echo "Ensure it binds to 0.0.0.0 (or your Tailscale interface) so the VPS can reach it."
  fi
fi

echo
echo "Done. To remove later:"
echo "  sudo ufw delete allow $RULE"
